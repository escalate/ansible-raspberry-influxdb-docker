- name: Create application user
  ansible.builtin.user:
    name: influxdb
    uid: 10300
    group: root
    create_home: false
    shell: /sbin/nologin

- name: Create config directory
  ansible.builtin.file:
    path: "{{ influxdb_etc_path }}"
    state: directory
    owner: influxdb
    group: root
    mode: "0775"  # https://github.com/influxdata/influxdata-docker/blob/master/influxdb/2.0/entrypoint.sh#L74

- name: Create data directory
  ansible.builtin.file:
    path: "{{ influxdb_data_path }}"
    state: directory
    owner: influxdb
    group: root
    mode: "0700"  # https://github.com/influxdata/influxdata-docker/blob/master/influxdb/2.0/entrypoint.sh#L71

- name: Create backup directory
  ansible.builtin.file:
    path: "{{ influxdb_backup_path }}"
    state: directory
    owner: influxdb
    group: root
    mode: "0775"

- name: Define environment variables
  ansible.builtin.template:
    src: influxdb.env.j2
    dest: /etc/influxdb.env
    owner: root
    group: root
    mode: "0644"
  notify: Restart influxdb service

- name: Define Docker container labels
  ansible.builtin.template:
    src: influxdb.label.j2
    dest: /etc/influxdb.label
    owner: root
    group: root
    mode: "0644"
  notify: Restart influxdb service

- name: Pull Docker image
  community.docker.docker_image:
    name: "influxdb:{{ influxdb_docker_image_version }}"
    source: pull

- name: Create systemd service
  ansible.builtin.template:
    src: influxdb.service.j2
    dest: /etc/systemd/system/influxdb.service
    owner: root
    group: root
    mode: "0644"
  notify: Restart influxdb service

- name: Start service
  ansible.builtin.systemd:
    name: influxdb
    state: started
    daemon_reload: true
  register: influxdb_service_started

- name: Enable service
  ansible.builtin.systemd:
    name: influxdb
    enabled: true
    daemon_reload: true

- name: Force all notified handlers to run at this point
  ansible.builtin.meta: flush_handlers

- name: Wait for service to become available
  ansible.builtin.uri:
    url: http://localhost:8086/
  register: result
  until: result.status == 200
  retries: 60
  delay: 1

- name: Initialize service
  ansible.builtin.command: |
    docker exec --interactive influxdb \
    influx setup \
    --username '{{ influxdb_primary_user }}' \
    --password '{{ influxdb_primary_user_password }}' \
    --org '{{ influxdb_primary_organization_name }}' \
    --bucket '{{ influxdb_primary_bucket_name }}' \
    --retention '{{ influxdb_primary_bucket_name_retention_period }}' \
    --force
  args:
    creates: "{{ influxdb_etc_path }}/influx-configs"

- name: List users
  ansible.builtin.command: |
    docker exec --interactive influxdb \
    influx user list \
    --json
  failed_when: false
  changed_when: false
  register: influxdb_user_list

- name: Create users
  ansible.builtin.command: |
    docker exec --interactive influxdb \
    influx user create \
    --name '{{ item.name }}' \
    --password '{{ item.password }}' \
    --org '{{ influxdb_primary_organization_name }}'
  when: item.name not in (influxdb_user_list.stdout | from_json | map(attribute='name'))
  changed_when: false
  loop: "{{ influxdb_users }}"
  no_log: true

- name: List buckets
  ansible.builtin.command: |
    docker exec --interactive influxdb \
    influx bucket list \
    --org '{{ influxdb_primary_organization_name }}' \
    --json
  failed_when: false
  changed_when: false
  register: influxdb_bucket_list

- name: Create buckets
  ansible.builtin.command: |
    docker exec --interactive influxdb \
    influx bucket create \
    --name '{{ item.name }}' \
    --description '{{ item.description }}' \
    --org '{{ influxdb_primary_organization_name }}' \
    --retention '{{ item.retention }}'
  when: item.name not in (influxdb_bucket_list.stdout | from_json | map(attribute='name'))
  changed_when: false
  loop: "{{ influxdb_buckets }}"

- name: List authorizations
  ansible.builtin.command: |
    docker exec --interactive influxdb \
    influx auth list \
    --org '{{ influxdb_primary_organization_name }}' \
    --json
  failed_when: false
  changed_when: false
  no_log: true
  register: influxdb_auth_list

- name: Create authorizations
  ansible.builtin.command: |
    docker exec --interactive influxdb \
    influx auth create \
    --user '{{ item.user }}' \
    --description '{{ item.description }}' \
    --{{ item.permissions | join(' --') }}
  when: item.user not in (influxdb_auth_list.stdout | from_json | map(attribute='userName'))
  changed_when: false
  loop: "{{ influxdb_authorizations }}"
  no_log: true

- name: Create backup script
  ansible.builtin.template:
    src: backup-influxdb.sh.j2
    dest: /usr/local/bin/backup-influxdb.sh
    owner: root
    group: root
    mode: "0755"

- name: Create restore script
  ansible.builtin.template:
    src: restore-influxdb.sh.j2
    dest: /usr/local/bin/restore-influxdb.sh
    owner: root
    group: root
    mode: "0755"
  no_log: true

- name: Add backup cron job
  ansible.builtin.cron:
    name: Backup InfluxDB
    minute: "30"
    hour: "4"
    job: "/usr/local/bin/backup-influxdb.sh || echo \"ERROR: A problem occurred during backup of InfluxDB. Please check the logfiles. journalctl -t backup-influxdb.sh\""  # noqa 204
    user: root
